apply plugin: "java-library"

ext {
    // Build on Windows only.  There is a better way to do this.
    osgiPlatform = 'win32.win32.x86_64'
}

jar {
    from "plugin.xml"
    archiveBaseName = "TestPlugin"
    
    manifest {
        attributes (
            'Manifest-Version': '1.0',
            'Require-Bundle': 'org.eclipse.ui,org.eclipse.core.runtime',
            'Bundle-ActivationPolicy': 'lazy',
            'Bundle-ManifestVersion': '2',
            'Bundle-Name': 'HelloWorld',
            'Bundle-Version': project.version,
            'Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8',
            'Bundle-Activator': 'com.checkmarx.plugin.eclipse.HelloWorld',
            'Bundle-SymbolicName': 'HelloWorldMenu; singleton:=true',
            'Main-Class' : 'com.checkmarx.CmdTest'
        )
    }
}


// Hack the OSGI platform name so the eclipse plugin dependencies can resolve.
configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details -> 

            if (details.target.name.matches (".*\\\$\\{osgi\\.platform\\}\$")) {

                def replaceIndex = details.target.name.indexOf ('\${osgi.platform}')

                details.useTarget ([
                    group: details.target.group,
                    name: details.target.name.substring(0, replaceIndex) + osgiPlatform,
                    version: details.target.version
                ])
            }
        }
    }
}

dependencies{
    compileOnly 'org.eclipse.platform:org.eclipse.jface:3.16.0', 'org.eclipse.platform:org.eclipse.ui:3.113.0'
    
    implementation project(":netutils"), project(":updateutils"), project(":cmdline_tester")

}
